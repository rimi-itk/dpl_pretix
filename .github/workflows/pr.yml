on:
  push:
    branches:
      - '**'
  pull_request:

name: Review

jobs:
  changelog:
    runs-on: ubuntu-latest
    name: Changelog should be updated
    if: github.event_name == 'pull_request'
    strategy:
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Git fetch
        run: git fetch

      - name: Check that changelog has been updated.
        run: git diff --exit-code origin/${{ github.base_ref }} -- CHANGELOG.md && exit 1 || exit 0

  documentation:
    runs-on: ubuntu-latest
    name: Documentation should be updated
    if: github.event_name == 'pull_request'
    strategy:
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Git fetch
        run: git fetch

      - name: Check that documentation (Markdown files) has been updated.
        run: git diff --exit-code origin/${{ github.base_ref }} -- git ls-files '*.md' ':!:CHANGELOG.md' ':!:.github/' && exit 1 || exit 0

  markdown-coding-standards:
    name: Markdown coding standards
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Coding standards
        run: |
          docker run --rm --volume $PWD:/md peterdavehello/markdownlint markdownlint --ignore LICENSE.md --ignore vendor/ '**/*.md' --dot

  composer-normalize:
    name: composer-normalize
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - run: |
          docker compose run --user root --rm php composer install
          docker compose run --user root --rm php composer normalize

  coding-standards-php-cs-fixer:
    name: coding-standards-check/php-cs-fixer
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - run: |
          docker compose run --user root --rm php composer install
          docker compose run --user root --rm php vendor/bin/phpcs

  coding-standards-shellcheck:
    name: coding-standards-check/shellcheck
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - run: |
          docker run --rm --volume "$PWD:/mnt" koalaman/shellcheck:stable scripts/create-release scripts/code-analysis

  code-analysis-phpstan:
    name: code-analysis/phpstan
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    env:
      # https://getcomposer.org/doc/03-cli.md#composer-auth
      COMPOSER_AUTH: |
        {
          "github-oauth": {
            "github.com": "${{ github.TOKEN }}"
          }
        }
    steps:
      - uses: actions/checkout@v4
      - run: |
          docker compose build
          docker compose run --user root --rm php composer install
          docker compose run --user root --rm --env COMPOSER_AUTH php scripts/code-analysis

  check-create-release:
    runs-on: ubuntu-latest
    name: Test create release
    strategy:
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create test release
        run: |
          docker compose run --user root --rm php scripts/create-release dev-test
